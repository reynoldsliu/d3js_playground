{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nexport let TreeVisualizationService = /*#__PURE__*/(() => {\n  class TreeVisualizationService {\n    initNodes;\n    svg;\n    root;\n    treeState = {\n      selectedNodes: [],\n      highlightNodes: []\n    };\n    constructor() {}\n    getInitNode(data) {\n      if (this.initNodes) {\n        return this.initNodes;\n      }\n      const width = 928;\n      const height = 500;\n      // Compute the tree height; this approach will allow the height of the\n      // this.svg to scale according to the breadth (width) of the tree layout.\n      this.root = d3.hierarchy(data);\n      console.log(data);\n      console.log(this.root);\n      const dx = 200;\n      const dy = height / (this.root.height + 1);\n      // Create a tree layout.\n      const tree = d3.tree().nodeSize([dx, dy]);\n      // Sort the tree and apply the layout.\n      this.root.sort((a, b) => d3.ascending(a.data.name, b.data.name));\n      tree(this.root);\n      // Compute the extent of the tree.\n      let x0 = Infinity;\n      let x1 = -x0;\n      let y0 = Infinity;\n      let y1 = -y0;\n      this.root.each(d => {\n        if (d.x !== undefined && d.x > x1) {\n          x1 = d.x;\n        }\n        if (d.x !== undefined && d.x < x0) {\n          x0 = d.x;\n        }\n        if (d.y !== undefined && d.y > y1) {\n          y1 = d.y;\n        }\n        if (d.y !== undefined && d.y < y0) {\n          y0 = d.y;\n        }\n      });\n      d3.interpolateZoom([30, 30, 40], [135, 85, 60])(0.5); // [72, 52, 126.04761005270991]\n      this.svg = d3.create('svg').attr('width', width).attr('height', height).attr('viewBox', [x0 - dx, y0 - dy, x1 - x0 + dx * 2, y1 - y0 + dy * 2]).attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;');\n      // Create the links\n      const links = this.root.links();\n      const linkGenerator = d3.linkVertical().x(d => d.x).y(d => d.y);\n      const link = this.svg.append('g').attr('fill', 'none').attr('stroke', '#555').attr('stroke-opacity', 0.4).attr('stroke-width', 1.5).selectAll('path').data(links).join('path').attr('d', d => linkGenerator(d));\n      const node = this.svg.append('g').attr('stroke-linejoin', 'round').attr('stroke-width', 3).selectAll('.node').data(this.root.descendants()).join('g').attr('transform', d => `translate(${d.x ?? 0},${d.y ?? 0})`).on('click', (event, d) => {\n        console.log('click');\n        console.log(d);\n        this.treeState.selectedNodes.push(d);\n        console.log(this.treeState.selectedNodes);\n      }).on('blur', (event, d) => {\n        console.log('blur');\n        this.treeState.selectedNodes = [];\n        // this.treeState.selectedNodes.filter(node => node.id != d.id);\n        console.log(this.treeState.selectedNodes);\n      });\n      node.append('circle').attr('fill', d => d.children ? '#555' : '#999').attr('r', 2.5);\n      node.append('text').attr('dy', '0.31em').attr('x', d => d.children ? -6 : 6).attr('text-anchor', d => d.children ? 'end' : 'start').text(d => d.data.name).attr('stroke', 'white').attr('paint-order', 'stroke');\n      node.append('foreignObject').attr('width', 120).attr('height', 80).attr('x', -60).attr('y', -40).html(d => {\n        // Create custom HTML for each node\n        return `\n      <div class=\"node-container\" style=\"width: 100%; height: 100%;\">\n        <div class=\"node-title\">${d.data.name}</div>\n        <div class=\"node-content\">${d.data.data || ''}</div>\n        <button class=\"node-button\" data-id=\"${d.data.id}\">Details</button>\n      </div>\n    `;\n      });\n      return this.svg.node();\n    }\n    findNode(id) {\n      const targetNode = this.root?.descendants().find(node => node.data.name === id);\n      console.log(targetNode);\n      if (targetNode) {\n        return targetNode;\n      }\n      return undefined;\n    }\n    getSelectedNodes() {\n      return this.treeState.selectedNodes;\n    }\n    removeSelectedNodes(nodeIds) {\n      nodeIds.forEach(id => {\n        if (id) {\n          const parent = this.root?.find(node => node.id === id)?.parent;\n          const children = parent?.descendants();\n          if (parent && children) {\n            parent.children = children?.filter(d => nodeIds.includes(d.id));\n          }\n        }\n      });\n    }\n    getRoot() {\n      return this.root;\n    }\n    static ɵfac = function TreeVisualizationService_Factory(t) {\n      return new (t || TreeVisualizationService)();\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreeVisualizationService,\n      factory: TreeVisualizationService.ɵfac\n    }))();\n  }\n  return TreeVisualizationService;\n})();","map":{"version":3,"names":["d3","TreeVisualizationService","initNodes","svg","root","treeState","selectedNodes","highlightNodes","constructor","getInitNode","data","width","height","hierarchy","console","log","dx","dy","tree","nodeSize","sort","a","b","ascending","name","x0","Infinity","x1","y0","y1","each","d","x","undefined","y","interpolateZoom","create","attr","links","linkGenerator","linkVertical","link","append","selectAll","join","node","descendants","on","event","push","children","text","html","id","findNode","targetNode","find","getSelectedNodes","removeSelectedNodes","nodeIds","forEach","parent","filter","includes","getRoot","factory","ɵfac"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/services/tree-visualization-service.ts"],"sourcesContent":["import {ElementRef, Injectable} from '@angular/core';\nimport * as d3 from 'd3';\nimport {TreeNode, TreeState} from '../interfaces/interfaces';\nimport {Selection} from 'd3-selection';\nimport {HierarchyNode} from 'd3-hierarchy';\n\n@Injectable()\nexport class TreeVisualizationService {\n\n  public initNodes: any;\n  public svg: Selection<any, any, any, any> | undefined;\n  public root: HierarchyNode<any> | undefined;\n  public treeState: TreeState = {selectedNodes: [], highlightNodes: []};\n\n  constructor() {\n  }\n\n  getInitNode(data: TreeNode) {\n    if (this.initNodes) {\n      return this.initNodes;\n    }\n\n    const width = 928;\n    const height = 500;\n\n    // Compute the tree height; this approach will allow the height of the\n    // this.svg to scale according to the breadth (width) of the tree layout.\n    this.root = d3.hierarchy(data);\n    console.log(data);\n    console.log(this.root);\n    const dx = 200;\n    const dy = height / (this.root.height + 1);\n\n    // Create a tree layout.\n    const tree = d3.tree<TreeNode>().nodeSize([dx, dy]);\n\n    // Sort the tree and apply the layout.\n    this.root.sort((a, b) => d3.ascending(a.data.name, b.data.name));\n    tree(this.root);\n\n    // Compute the extent of the tree.\n    let x0 = Infinity;\n    let x1 = -x0;\n    let y0 = Infinity;\n    let y1 = -y0;\n    this.root.each(d => {\n      if (d.x !== undefined && d.x > x1) {\n        x1 = d.x;\n      }\n      if (d.x !== undefined && d.x < x0) {\n        x0 = d.x;\n      }\n      if (d.y !== undefined && d.y > y1) {\n        y1 = d.y;\n      }\n      if (d.y !== undefined && d.y < y0) {\n        y0 = d.y;\n      }\n    });\n\n    d3.interpolateZoom([30, 30, 40], [135, 85, 60])(0.5) // [72, 52, 126.04761005270991]\n\n    this.svg = d3.create('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [x0 - dx, y0 - dy, x1 - x0 + dx * 2, y1 - y0 + dy * 2])\n      .attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;');\n\n    // Create the links\n    const links = this.root.links();\n    const linkGenerator = d3.linkVertical()\n      .x((d: any) => d.x)\n      .y((d: any) => d.y);\n\n    const link = this.svg.append('g')\n      .attr('fill', 'none')\n      .attr('stroke', '#555')\n      .attr('stroke-opacity', 0.4)\n      .attr('stroke-width', 1.5)\n      .selectAll('path')\n      .data(links)\n      .join('path')\n      .attr('d', (d: any) => linkGenerator(d));\n\n    const node = this.svg.append('g')\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-width', 3)\n      .selectAll('.node')\n      .data(this.root.descendants())\n      .join('g')\n      .attr('transform', d => `translate(${d.x ?? 0},${d.y ?? 0})`)\n      .on('click', (event, d: TreeNode) => {\n        console.log('click');\n        console.log(d);\n        this.treeState.selectedNodes.push(d);\n        console.log(this.treeState.selectedNodes);\n      })\n      .on('blur', (event, d: TreeNode) => {\n        console.log('blur');\n        this.treeState.selectedNodes = [];\n          // this.treeState.selectedNodes.filter(node => node.id != d.id);\n        console.log(this.treeState.selectedNodes);\n      });\n\n    node.append('circle')\n      .attr('fill', d => d.children ? '#555' : '#999')\n      .attr('r', 2.5);\n\n    node.append('text')\n      .attr('dy', '0.31em')\n      .attr('x', d => d.children ? -6 : 6)\n      .attr('text-anchor', d => d.children ? 'end' : 'start')\n      .text(d => d.data.name)\n      .attr('stroke', 'white')\n      .attr('paint-order', 'stroke');\n\n    node.append('foreignObject')\n      .attr('width', 120)\n      .attr('height', 80)\n      .attr('x', -60)\n      .attr('y', -40)\n      .html(d => {\n        // Create custom HTML for each node\n        return `\n      <div class=\"node-container\" style=\"width: 100%; height: 100%;\">\n        <div class=\"node-title\">${d.data.name}</div>\n        <div class=\"node-content\">${d.data.data || ''}</div>\n        <button class=\"node-button\" data-id=\"${d.data.id}\">Details</button>\n      </div>\n    `;\n      });\n\n    return this.svg.node();\n  }\n\n  findNode(id: string): TreeNode | undefined {\n    const targetNode = this.root?.descendants().find(node => node.data.name === id);\n    console.log(targetNode);\n    if (targetNode) {\n      return targetNode;\n    }\n    return undefined;\n  }\n\n  getSelectedNodes(): TreeNode[] {\n    return this.treeState.selectedNodes;\n  }\n\n  removeSelectedNodes(nodeIds: (string | undefined)[]): void {\n    nodeIds.forEach((id: string | undefined) => {\n      if (id) {\n        const parent = this.root?.find(node => node.id === id)?.parent;\n        const children = parent?.descendants();\n        if (parent && children) {\n          parent.children = children?.filter(d => nodeIds.includes(d.id));\n        }\n      }\n    });\n  }\n\n  getRoot(){\n    return this.root as HierarchyNode<TreeNode>;\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}