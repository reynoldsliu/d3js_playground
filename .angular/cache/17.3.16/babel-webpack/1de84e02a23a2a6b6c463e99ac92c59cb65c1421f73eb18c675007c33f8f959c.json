{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nexport let TreeVisualizationService = /*#__PURE__*/(() => {\n  class TreeVisualizationService {\n    constructor() {}\n    extracted(data, treeContainer) {\n      const width = 928;\n      const height = 500;\n      // Compute the tree height; this approach will allow the height of the\n      // SVG to scale according to the breadth (width) of the tree layout.\n      const root = d3.hierarchy(data);\n      const dx = 20;\n      const dy = height / (root.height + 1);\n      // Create a tree layout.\n      const tree = d3.tree().nodeSize([dx, dy]);\n      // Sort the tree and apply the layout.\n      root.sort((a, b) => d3.ascending(a.data.name, b.data.name));\n      tree(root);\n      // Compute the extent of the tree.\n      let x0 = Infinity;\n      let x1 = -x0;\n      let y0 = Infinity;\n      let y1 = -y0;\n      root.each(d => {\n        if (d.x !== undefined && d.x > x1) {\n          x1 = d.x;\n        }\n        if (d.x !== undefined && d.x < x0) {\n          x0 = d.x;\n        }\n        if (d.y !== undefined && d.y > y1) {\n          y1 = d.y;\n        }\n        if (d.y !== undefined && d.y < y0) {\n          y0 = d.y;\n        }\n      });\n      const svg = d3.create('svg').attr('width', width).attr('height', height).attr('viewBox', [x0 - dx, y0 - dy, x1 - x0 + dx * 2, y1 - y0 + dy * 2]).attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;');\n      // Create the links\n      const links = root.links();\n      const linkGenerator = d3.linkVertical().x(d => d.x).y(d => d.y);\n      const link = svg.append('g').attr('fill', 'none').attr('stroke', '#555').attr('stroke-opacity', 0.4).attr('stroke-width', 1.5).selectAll('path').data(links).join('path').attr('d', d => linkGenerator(d));\n      const node = svg.append('g').attr('stroke-linejoin', 'round').attr('stroke-width', 3).selectAll().data(root.descendants()).join('g').attr('transform', d => `translate(${d.x ?? 0},${d.y ?? 0})`);\n      node.append('circle').attr('fill', d => d.children ? '#555' : '#999').attr('r', 2.5);\n      node.append('text').attr('dy', '0.31em').attr('x', d => d.children ? -6 : 6).attr('text-anchor', d => d.children ? 'end' : 'start').text(d => d.data.name).attr('stroke', 'white').attr('paint-order', 'stroke');\n      treeContainer.nativeElement.appendChild(svg.node());\n    }\n    static ɵfac = function TreeVisualizationService_Factory(t) {\n      return new (t || TreeVisualizationService)();\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreeVisualizationService,\n      factory: TreeVisualizationService.ɵfac\n    }))();\n  }\n  return TreeVisualizationService;\n})();","map":{"version":3,"names":["d3","TreeVisualizationService","constructor","extracted","data","treeContainer","width","height","root","hierarchy","dx","dy","tree","nodeSize","sort","a","b","ascending","name","x0","Infinity","x1","y0","y1","each","d","x","undefined","y","svg","create","attr","links","linkGenerator","linkVertical","link","append","selectAll","join","node","descendants","children","text","nativeElement","appendChild","factory","ɵfac"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/services/tree-visualization-service.ts"],"sourcesContent":["import {ElementRef, Injectable} from '@angular/core';\nimport * as d3 from 'd3';\nimport {TreeNode} from '../interfaces/interfaces';\n\n@Injectable()\nexport class TreeVisualizationService {\n  constructor() {\n  }\n\n  extracted(data: TreeNode, treeContainer: ElementRef) {\n    const width = 928;\n    const height = 500;\n\n    // Compute the tree height; this approach will allow the height of the\n    // SVG to scale according to the breadth (width) of the tree layout.\n    const root = d3.hierarchy(data);\n    const dx = 20;\n    const dy = height / (root.height + 1);\n\n    // Create a tree layout.\n    const tree = d3.tree<TreeNode>().nodeSize([dx, dy]);\n\n    // Sort the tree and apply the layout.\n    root.sort((a, b) => d3.ascending(a.data.name, b.data.name));\n    tree(root);\n\n    // Compute the extent of the tree.\n    let x0 = Infinity;\n    let x1 = -x0;\n    let y0 = Infinity;\n    let y1 = -y0;\n    root.each(d => {\n      if (d.x !== undefined && d.x > x1) {\n        x1 = d.x;\n      }\n      if (d.x !== undefined && d.x < x0) {\n        x0 = d.x;\n      }\n      if (d.y !== undefined && d.y > y1) {\n        y1 = d.y;\n      }\n      if (d.y !== undefined && d.y < y0) {\n        y0 = d.y;\n      }\n    });\n\n    const svg = d3.create('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [x0 - dx, y0 - dy, x1 - x0 + dx * 2, y1 - y0 + dy * 2])\n      .attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;');\n\n    // Create the links\n    const links = root.links();\n    const linkGenerator = d3.linkVertical()\n      .x((d: any) => d.x)\n      .y((d: any) => d.y);\n\n    const link = svg.append('g')\n      .attr('fill', 'none')\n      .attr('stroke', '#555')\n      .attr('stroke-opacity', 0.4)\n      .attr('stroke-width', 1.5)\n      .selectAll('path')\n      .data(links)\n      .join('path')\n      .attr('d', (d: any) => linkGenerator(d));\n\n    const node = svg.append('g')\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-width', 3)\n      .selectAll()\n      .data(root.descendants())\n      .join('g')\n      .attr('transform', d => `translate(${d.x ?? 0},${d.y ?? 0})`);\n\n    node.append('circle')\n      .attr('fill', d => d.children ? '#555' : '#999')\n      .attr('r', 2.5);\n\n    node.append('text')\n      .attr('dy', '0.31em')\n      .attr('x', d => d.children ? -6 : 6)\n      .attr('text-anchor', d => d.children ? 'end' : 'start')\n      .text(d => d.data.name)\n      .attr('stroke', 'white')\n      .attr('paint-order', 'stroke');\n\n    treeContainer.nativeElement.appendChild(svg.node());\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}