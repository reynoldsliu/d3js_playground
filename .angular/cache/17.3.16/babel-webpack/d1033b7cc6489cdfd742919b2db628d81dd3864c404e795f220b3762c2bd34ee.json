{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/tree-visualization-service\";\nconst _c0 = [\"treeContainer\"];\nexport let TreeVisualizationComponent = /*#__PURE__*/(() => {\n  class TreeVisualizationComponent {\n    treeVisualizationService;\n    treeContainer;\n    subscription;\n    data = {\n      name: 'Eve',\n      children: [{\n        name: 'Cain'\n      }, {\n        name: 'Seth',\n        children: [{\n          name: 'Enos'\n        }, {\n          name: 'Noam'\n        }]\n      }, {\n        name: 'Abel'\n      }, {\n        name: 'Awan',\n        children: [{\n          name: 'Enoch'\n        }]\n      }, {\n        name: 'Azura'\n      }]\n    };\n    constructor(treeVisualizationService) {\n      this.treeVisualizationService = treeVisualizationService;\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      const initNode = this.treeVisualizationService.getInitNode(this.data);\n      this.treeContainer.nativeElement.appendChild(initNode);\n    }\n    createNode() {\n      console.log('createNode');\n      const selectedNodes = this.treeVisualizationService.getSelectedNodes();\n      console.log(selectedNodes);\n      console.log(selectedNodes.length);\n      console.log(selectedNodes[selectedNodes.length - 1]);\n      console.log(selectedNodes[selectedNodes.length - 1].name);\n      if (selectedNodes.length > 0 && selectedNodes[selectedNodes.length - 1] && selectedNodes[selectedNodes.length - 1].name) {\n        console.log('selected');\n        const selectedNode = this.treeVisualizationService.findNode(selectedNodes[0].name);\n        if (selectedNode) {\n          if (!selectedNode.children) {\n            selectedNode.children = [];\n          }\n          selectedNode.children.push({\n            id: '',\n            name: '',\n            // data: '',\n            parentId: selectedNode.id,\n            level: selectedNode.level + 1\n          });\n        }\n      }\n    }\n    deleteNode() {\n      console.log('deleteNode');\n      const selectedNodes = this.treeVisualizationService.getSelectedNodes();\n      this.treeVisualizationService.removeSelectedNodes(selectedNodes.map(e => e.id));\n    }\n    selectedNodes() {\n      console.log(this.treeVisualizationService.getSelectedNodes());\n    }\n    resetView() {\n      // Implement reset functionality if needed\n    }\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    static ɵfac = function TreeVisualizationComponent_Factory(t) {\n      return new (t || TreeVisualizationComponent)(i0.ɵɵdirectiveInject(i1.TreeVisualizationService));\n    };\n    static ɵcmp = (() => /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TreeVisualizationComponent,\n      selectors: [[\"app-tree-visualization\"]],\n      viewQuery: function TreeVisualizationComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n        }\n      },\n      decls: 12,\n      vars: 0,\n      consts: [[\"treeContainer\", \"\"], [1, \"tree-container\"], [1, \"tree-controls\"], [1, \"reset-button\", 3, \"click\"], [3, \"click\"], [1, \"tree-visualization\"]],\n      template: function TreeVisualizationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function TreeVisualizationComponent_Template_button_click_2_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.resetView());\n          });\n          i0.ɵɵtext(3, \"\\u91CD\\u7F6E\\u8996\\u5716\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function TreeVisualizationComponent_Template_button_click_4_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.createNode());\n          });\n          i0.ɵɵtext(5, \"\\u65B0\\u589E\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function TreeVisualizationComponent_Template_button_click_6_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.deleteNode());\n          });\n          i0.ɵɵtext(7, \"\\u522A\\u9664\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function TreeVisualizationComponent_Template_button_click_8_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.selectedNodes());\n          });\n          i0.ɵɵtext(9, \"\\u5DF2\\u9078\\u53D6\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(10, \"div\", 5, 0);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".tree-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 600px;\\n  border: 1px solid #ccc;\\n  overflow: hidden;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90cmVlLXZpc3VhbGl6YXRpb24vdHJlZS12aXN1YWxpemF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGdCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIudHJlZS1jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA2MDBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    }))();\n  }\n  return TreeVisualizationComponent;\n})();","map":{"version":3,"names":["TreeVisualizationComponent","treeVisualizationService","treeContainer","subscription","data","name","children","constructor","ngOnInit","ngAfterViewInit","initNode","getInitNode","nativeElement","appendChild","createNode","console","log","selectedNodes","getSelectedNodes","length","selectedNode","findNode","push","id","parentId","level","deleteNode","removeSelectedNodes","map","e","resetView","ngOnDestroy","unsubscribe","i0","ɵɵdirectiveInject","i1","TreeVisualizationService","selectors","viewQuery","TreeVisualizationComponent_Query","rf","ctx","ɵɵelementStart","ɵɵlistener","TreeVisualizationComponent_Template_button_click_2_listener","ɵɵrestoreView","_r1","ɵɵresetView","ɵɵtext","ɵɵelementEnd","TreeVisualizationComponent_Template_button_click_4_listener","TreeVisualizationComponent_Template_button_click_6_listener","TreeVisualizationComponent_Template_button_click_8_listener","ɵɵelement"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/components/tree-visualization/tree-visualization.component.ts","/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/components/tree-visualization/tree-visualization.component.html"],"sourcesContent":["import {Component, OnInit, ElementRef, ViewChild, AfterViewInit, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport * as d3 from 'd3';\nimport {TreeNode} from '../../interfaces/interfaces';\nimport {TreeVisualizationService} from '../../services/tree-visualization-service';\n\n@Component({\n  selector: 'app-tree-visualization',\n  templateUrl: './tree-visualization.component.html',\n  styleUrls: ['./tree-visualization.component.scss']\n})\nexport class TreeVisualizationComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('treeContainer', {static: true}) public treeContainer!: ElementRef;\n  private subscription: Subscription | undefined;\n\n  data: TreeNode = {\n    name: 'Eve',\n    children: [\n      {name: 'Cain'},\n      {name: 'Seth', children: [{name: 'Enos'}, {name: 'Noam'}]},\n      {name: 'Abel'},\n      {name: 'Awan', children: [{name: 'Enoch'}]},\n      {name: 'Azura'}\n    ]\n  };\n\n  constructor(private treeVisualizationService: TreeVisualizationService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    const initNode =\n      this.treeVisualizationService.getInitNode(this.data);\n    this.treeContainer.nativeElement.appendChild(initNode);\n  }\n\n  createNode(): void {\n    console.log('createNode');\n    const selectedNodes = this.treeVisualizationService.getSelectedNodes();\n    console.log(selectedNodes);\n    console.log(selectedNodes.length);\n    console.log(selectedNodes[selectedNodes.length - 1]);\n    console.log(selectedNodes[selectedNodes.length - 1].name);\n    if (selectedNodes.length > 0\n      && selectedNodes[selectedNodes.length - 1]\n      && selectedNodes[selectedNodes.length - 1].name) {\n      console.log('selected');\n      const selectedNode = this.treeVisualizationService.findNode(selectedNodes[0].name);\n      if (selectedNode) {\n        if (!selectedNode.children) {\n          selectedNode.children = [];\n        }\n        selectedNode.children.push({\n          id: '',\n          name: '',\n          // data: '',\n          parentId: selectedNode.id,\n          level: selectedNode.level as number + 1,\n        });\n      }\n    }\n  }\n\n  deleteNode(): void {\n    console.log('deleteNode');\n    const selectedNodes = this.treeVisualizationService.getSelectedNodes();\n    this.treeVisualizationService.removeSelectedNodes(selectedNodes.map(e => e.id));\n  }\n\n  selectedNodes(): void {\n    console.log(this.treeVisualizationService.getSelectedNodes());\n  }\n\n  resetView(): void {\n    // Implement reset functionality if needed\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"tree-container\">\n  <div class=\"tree-controls\">\n    <button class=\"reset-button\" (click)=\"resetView()\">重置視圖</button>\n    <button (click)=\"createNode()\">新增</button>\n    <button (click)=\"deleteNode()\">刪除</button>\n    <button (click)=\"selectedNodes()\">已選取</button>\n  </div>\n  <div #treeContainer class=\"tree-visualization\"></div>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}