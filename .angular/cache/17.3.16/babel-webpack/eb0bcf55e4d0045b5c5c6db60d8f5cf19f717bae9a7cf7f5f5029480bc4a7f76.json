{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { randomUUID } from 'node:crypto';\nimport * as i0 from \"@angular/core\";\nexport let TreeDataService = /*#__PURE__*/(() => {\n  class TreeDataService {\n    treeDataSubject = (() => new BehaviorSubject(null))();\n    treeData$ = this.treeDataSubject.asObservable();\n    // 當前選中節點的 BehaviorSubject\n    selectedNodeSubject = (() => new BehaviorSubject(null))();\n    selectedNode$ = this.selectedNodeSubject.asObservable();\n    // 樹狀視圖狀態\n    treeStateSubject = (() => new BehaviorSubject({\n      expandedNodeIds: [],\n      zoom: 1,\n      pan: {\n        x: 0,\n        y: 0\n      }\n    }))();\n    treeState$ = this.treeStateSubject.asObservable();\n    constructor() {}\n    // 載入初始數據\n    loadInitialData(data) {\n      this.treeDataSubject.next(data);\n    }\n    // 選擇節點\n    selectNode(nodeId) {\n      // TODO: 實現選擇節點邏輯\n      const currentData = this.treeDataSubject.getValue();\n      if (!currentData) {\n        return;\n      }\n      // 創建數據的深拷貝以避免直接修改\n      const newData = this.deepCloneTree(currentData);\n      // 重置所有節點的選擇狀態\n      this.resetSelection(newData);\n      // 找到並選中目標節點\n      const targetNode = this.getNodeByIdRecursion(newData, nodeId);\n      if (targetNode) {\n        targetNode.selected = true;\n        // 更新選中節點的主題\n        this.selectedNodeSubject.next(targetNode);\n      }\n      // 發出更新後的樹數據\n      this.treeDataSubject.next(newData);\n    }\n    // 新增節點\n    addNode(parentId, newNode) {\n      // TODO: 實現新增節點邏輯\n      const currentData = this.treeDataSubject.getValue();\n      if (!currentData) {\n        return;\n      }\n      const newData = this.deepCloneTree(currentData);\n      if (parentId) {\n        const targetNode = this.getNodeByIdRecursion(newData, parentId);\n        if (targetNode) {\n          // 初始化 children 陣列如果不存在\n          if (!targetNode.children) {\n            targetNode.children = [];\n          }\n          // 設置正確的 parentId 和 level\n          if (!newNode.id) {\n            newNode.id = this.generateUniqueId();\n          }\n          newNode.parentId = parentId;\n          newNode.level = (targetNode.level || 0) + 1;\n          // 初始化其他屬性\n          newNode.locked = newNode.locked || false;\n          newNode.selected = false; // 新添加的節點通常不會預設為選中狀態\n          newNode.reports = newNode.reports || [];\n          // 添加節點到父節點的 children 中\n          targetNode.children.push(newNode);\n        }\n      } else {\n        // 如果沒有 parentId，則添加為根節點的子節點\n        // 通常這種情況較少見，但處理以防萬一\n        if (!newData.children) {\n          newData.children = [];\n        }\n        // 如果頂層節點沒有 level，初始化為 0\n        if (parentId === null && newData.level === undefined) {\n          newData.level = 0;\n        } else {\n          newNode.level = 1;\n        }\n        newNode.parentId = newData.id;\n        newData.children.push(newNode);\n      }\n      this.treeDataSubject.next(newData);\n    }\n    // 編輯節點\n    updateNode(nodeId, updates) {\n      // TODO: 實現編輯節點邏輯\n    }\n    // 刪除節點\n    deleteNode(nodeId) {\n      // TODO: 實現刪除節點邏輯\n    }\n    // 鎖定/解鎖節點\n    toggleLockNode(nodeId, locked) {\n      // TODO: 實現鎖定/解鎖邏輯\n    }\n    // 節點關聯\n    linkNodes(sourceId, targetId) {\n      // TODO: 實現節點關聯邏輯\n    }\n    // 取消節點關聯\n    unlinkNodes(sourceId, targetId) {\n      // TODO: 實現取消節點關聯邏輯\n    }\n    // 查找相同名稱的節點\n    findNodesByName(name) {\n      // TODO: 實現查找相同名稱節點的邏輯\n      return [];\n    }\n    // 獲取當前樹狀視圖狀態\n    getTreeState() {\n      return this.treeStateSubject.getValue();\n    }\n    // 更新樹狀視圖狀態\n    updateTreeState(updates) {\n      this.treeStateSubject.next({\n        ...this.treeStateSubject.getValue(),\n        ...updates\n      });\n    }\n    getNodeByIdRecursion(root, nodeId) {\n      // 先檢查當前節點\n      if (root.id === nodeId) {\n        return root;\n      }\n      // 如果有子節點，遞迴搜尋\n      if (root.children && root.children.length > 0) {\n        for (const child of root.children) {\n          const found = this.getNodeByIdRecursion(child, nodeId);\n          if (found) {\n            return found;\n          }\n        }\n      }\n      // 未找到\n      return null;\n    }\n    // 重置所有節點的選擇狀態\n    resetSelection(node) {\n      node.selected = false;\n      if (node.children) {\n        node.children.forEach(child => this.resetSelection(child));\n      }\n    }\n    // 深拷貝樹\n    deepCloneTree(node) {\n      const clone = {\n        ...node\n      };\n      if (node.children) {\n        clone.children = node.children.map(child => this.deepCloneTree(child));\n      }\n      return clone;\n    }\n    generateUniqueId() {\n      return randomUUID();\n    }\n    static ɵfac = function TreeDataService_Factory(t) {\n      return new (t || TreeDataService)();\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreeDataService,\n      factory: TreeDataService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return TreeDataService;\n})();","map":{"version":3,"names":["BehaviorSubject","randomUUID","TreeDataService","treeDataSubject","treeData$","asObservable","selectedNodeSubject","selectedNode$","treeStateSubject","expandedNodeIds","zoom","pan","x","y","treeState$","constructor","loadInitialData","data","next","selectNode","nodeId","currentData","getValue","newData","deepCloneTree","resetSelection","targetNode","getNodeByIdRecursion","selected","addNode","parentId","newNode","children","id","generateUniqueId","level","locked","reports","push","undefined","updateNode","updates","deleteNode","toggleLockNode","linkNodes","sourceId","targetId","unlinkNodes","findNodesByName","name","getTreeState","updateTreeState","root","length","child","found","node","forEach","clone","map","factory","ɵfac","providedIn"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/services/tree-data-service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {TreeNode, TreeState} from '../interfaces/interfaces';\nimport {randomUUID} from 'node:crypto';\n\n@Injectable({providedIn: 'root'})\nexport class TreeDataService {\n  private treeDataSubject = new BehaviorSubject<TreeNode | null>(null);\n  treeData$ = this.treeDataSubject.asObservable();\n\n  // 當前選中節點的 BehaviorSubject\n  private selectedNodeSubject = new BehaviorSubject<TreeNode | null>(null);\n  selectedNode$ = this.selectedNodeSubject.asObservable();\n\n  // 樹狀視圖狀態\n  private treeStateSubject = new BehaviorSubject<TreeState>({\n    expandedNodeIds: [],\n    zoom: 1,\n    pan: {x: 0, y: 0}\n  });\n  treeState$ = this.treeStateSubject.asObservable();\n\n  constructor() {\n  }\n\n  // 載入初始數據\n  loadInitialData(data: TreeNode): void {\n    this.treeDataSubject.next(data);\n  }\n\n  // 選擇節點\n  selectNode(nodeId: string): void {\n    // TODO: 實現選擇節點邏輯\n    const currentData = this.treeDataSubject.getValue();\n    if (!currentData) {\n      return;\n    }\n\n    // 創建數據的深拷貝以避免直接修改\n    const newData = this.deepCloneTree(currentData);\n\n    // 重置所有節點的選擇狀態\n    this.resetSelection(newData);\n\n    // 找到並選中目標節點\n    const targetNode = this.getNodeByIdRecursion(newData, nodeId);\n    if (targetNode) {\n      targetNode.selected = true;\n      // 更新選中節點的主題\n      this.selectedNodeSubject.next(targetNode);\n    }\n\n    // 發出更新後的樹數據\n    this.treeDataSubject.next(newData);\n  }\n\n  // 新增節點\n  addNode(parentId: string | null, newNode: TreeNode): void {\n    // TODO: 實現新增節點邏輯\n    const currentData = this.treeDataSubject.getValue();\n    if (!currentData) {\n      return;\n    }\n\n    const newData = this.deepCloneTree(currentData);\n    if (parentId) {\n      const targetNode = this.getNodeByIdRecursion(newData, parentId);\n      if (targetNode) {\n        // 初始化 children 陣列如果不存在\n        if (!targetNode.children) {\n          targetNode.children = [];\n        }\n        // 設置正確的 parentId 和 level\n        if (!newNode.id) {\n          newNode.id = this.generateUniqueId();\n        }\n        newNode.parentId = parentId;\n        newNode.level = (targetNode.level || 0) + 1;\n        // 初始化其他屬性\n        newNode.locked = newNode.locked || false;\n        newNode.selected = false; // 新添加的節點通常不會預設為選中狀態\n        newNode.reports = newNode.reports || [];\n\n        // 添加節點到父節點的 children 中\n        targetNode.children.push(newNode);\n      }\n    } else {\n      // 如果沒有 parentId，則添加為根節點的子節點\n      // 通常這種情況較少見，但處理以防萬一\n      if (!newData.children) {\n        newData.children = [];\n      }\n\n      // 如果頂層節點沒有 level，初始化為 0\n      if (parentId === null && newData.level === undefined) {\n        newData.level = 0;\n      }else{\n        newNode.level = 1;\n      }\n      newNode.parentId = newData.id;\n      newData.children.push(newNode);\n    }\n\n    this.treeDataSubject.next(newData);\n  }\n\n  // 編輯節點\n  updateNode(nodeId: string, updates: Partial<TreeNode>): void {\n    // TODO: 實現編輯節點邏輯\n  }\n\n  // 刪除節點\n  deleteNode(nodeId: string): void {\n    // TODO: 實現刪除節點邏輯\n  }\n\n  // 鎖定/解鎖節點\n  toggleLockNode(nodeId: string, locked: boolean): void {\n    // TODO: 實現鎖定/解鎖邏輯\n  }\n\n  // 節點關聯\n  linkNodes(sourceId: string, targetId: string): void {\n    // TODO: 實現節點關聯邏輯\n  }\n\n  // 取消節點關聯\n  unlinkNodes(sourceId: string, targetId: string): void {\n    // TODO: 實現取消節點關聯邏輯\n  }\n\n  // 查找相同名稱的節點\n  findNodesByName(name: string): TreeNode[] {\n    // TODO: 實現查找相同名稱節點的邏輯\n    return [];\n  }\n\n  // 獲取當前樹狀視圖狀態\n  getTreeState(): TreeState {\n    return this.treeStateSubject.getValue();\n  }\n\n  // 更新樹狀視圖狀態\n  updateTreeState(updates: Partial<TreeState>): void {\n    this.treeStateSubject.next({\n      ...this.treeStateSubject.getValue(),\n      ...updates\n    });\n  }\n\n  getNodeByIdRecursion(root: TreeNode, nodeId: string): TreeNode | null {\n    // 先檢查當前節點\n    if (root.id === nodeId) {\n      return root;\n    }\n\n    // 如果有子節點，遞迴搜尋\n    if (root.children && root.children.length > 0) {\n      for (const child of root.children) {\n        const found = this.getNodeByIdRecursion(child, nodeId);\n        if (found) {\n          return found;\n        }\n      }\n    }\n\n    // 未找到\n    return null;\n  }\n\n  // 重置所有節點的選擇狀態\n  private resetSelection(node: TreeNode): void {\n    node.selected = false;\n    if (node.children) {\n      node.children.forEach(child => this.resetSelection(child));\n    }\n  }\n\n// 深拷貝樹\n  private deepCloneTree(node: TreeNode): TreeNode {\n    const clone = {...node};\n    if (node.children) {\n      clone.children = node.children.map(child => this.deepCloneTree(child));\n    }\n    return clone;\n  }\n\n  private generateUniqueId(): string {\n    return randomUUID();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}