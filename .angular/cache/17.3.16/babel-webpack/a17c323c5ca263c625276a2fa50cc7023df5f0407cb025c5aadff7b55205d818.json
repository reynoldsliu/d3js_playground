{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nexport let TreeVisualizationService = /*#__PURE__*/(() => {\n  class TreeVisualizationService {\n    nodeWidth = 75;\n    nodeHeight = 40;\n    defaultData = {\n      name: 'Eve',\n      children: [{\n        name: 'Cain'\n      }, {\n        name: 'Seth',\n        children: [{\n          name: 'Enos'\n        }, {\n          name: 'Noam'\n        }]\n      }, {\n        name: 'Abel'\n      }, {\n        name: 'Awan',\n        children: [{\n          name: 'Enoch'\n        }]\n      }, {\n        name: 'Azura'\n      }]\n    };\n    constructor() {}\n    getInitNode(data) {\n      if (!data) {\n        data = this.defaultData;\n      }\n      const root = d3.hierarchy(data);\n      const tree = d3.tree().nodeSize([this.nodeWidth, this.nodeHeight]);\n      tree(root);\n      const svg = d3.select('.tree-visualization').append('svg');\n      const nodes = svg.append('g').classed('node');\n      const links = svg.append('g').classed('link');\n    }\n    static ɵfac = function TreeVisualizationService_Factory(t) {\n      return new (t || TreeVisualizationService)();\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreeVisualizationService,\n      factory: TreeVisualizationService.ɵfac\n    }))();\n  }\n  return TreeVisualizationService;\n})();","map":{"version":3,"names":["d3","TreeVisualizationService","nodeWidth","nodeHeight","defaultData","name","children","constructor","getInitNode","data","root","hierarchy","tree","nodeSize","svg","select","append","nodes","classed","links","factory","ɵfac"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/services/tree-visualization-service.ts"],"sourcesContent":["import {ElementRef, Injectable} from '@angular/core';\nimport * as d3 from 'd3';\nimport {TreeNode, TreeState} from '../interfaces/interfaces';\nimport {Selection} from 'd3-selection';\nimport {HierarchyNode} from 'd3-hierarchy';\n\n@Injectable()\nexport class TreeVisualizationService {\n\n  public nodeWidth = 75;\n  public nodeHeight = 40;\n\n  defaultData: TreeNode = {\n    name: 'Eve',\n    children: [\n      {name: 'Cain'},\n      {name: 'Seth', children: [{name: 'Enos'}, {name: 'Noam'}]},\n      {name: 'Abel'},\n      {name: 'Awan', children: [{name: 'Enoch'}]},\n      {name: 'Azura'}\n    ]\n  };\n\n  constructor() {\n  }\n\n  getInitNode(data: TreeNode) {\n    if(!data){\n      data = this.defaultData;\n    }\n    const root = d3.hierarchy(data);\n    const tree = d3.tree().nodeSize([this.nodeWidth, this.nodeHeight]);\n    tree(root);\n    const svg = d3.select('.tree-visualization')\n      .append('svg');\n\n    const nodes = svg.append('g')\n      .classed('node');\n\n    const links = svg.append('g')\n      .classed('link');\n\n\n  }\n\n}\n"],"mappings":"AACA,OAAO,KAAKA,EAAE,MAAM,IAAI;;AAMxB,WAAaC,wBAAwB;EAA/B,MAAOA,wBAAwB;IAE5BC,SAAS,GAAG,EAAE;IACdC,UAAU,GAAG,EAAE;IAEtBC,WAAW,GAAa;MACtBC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE,CACR;QAACD,IAAI,EAAE;MAAM,CAAC,EACd;QAACA,IAAI,EAAE,MAAM;QAAEC,QAAQ,EAAE,CAAC;UAACD,IAAI,EAAE;QAAM,CAAC,EAAE;UAACA,IAAI,EAAE;QAAM,CAAC;MAAC,CAAC,EAC1D;QAACA,IAAI,EAAE;MAAM,CAAC,EACd;QAACA,IAAI,EAAE,MAAM;QAAEC,QAAQ,EAAE,CAAC;UAACD,IAAI,EAAE;QAAO,CAAC;MAAC,CAAC,EAC3C;QAACA,IAAI,EAAE;MAAO,CAAC;KAElB;IAEDE,YAAA,GACA;IAEAC,WAAWA,CAACC,IAAc;MACxB,IAAG,CAACA,IAAI,EAAC;QACPA,IAAI,GAAG,IAAI,CAACL,WAAW;MACzB;MACA,MAAMM,IAAI,GAAGV,EAAE,CAACW,SAAS,CAACF,IAAI,CAAC;MAC/B,MAAMG,IAAI,GAAGZ,EAAE,CAACY,IAAI,EAAE,CAACC,QAAQ,CAAC,CAAC,IAAI,CAACX,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC,CAAC;MAClES,IAAI,CAACF,IAAI,CAAC;MACV,MAAMI,GAAG,GAAGd,EAAE,CAACe,MAAM,CAAC,qBAAqB,CAAC,CACzCC,MAAM,CAAC,KAAK,CAAC;MAEhB,MAAMC,KAAK,GAAGH,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAC1BE,OAAO,CAAC,MAAM,CAAC;MAElB,MAAMC,KAAK,GAAGL,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAC1BE,OAAO,CAAC,MAAM,CAAC;IAGpB;;uBApCWjB,wBAAwB;IAAA;;aAAxBA,wBAAwB;MAAAmB,OAAA,EAAxBnB,wBAAwB,CAAAoB;IAAA;;SAAxBpB,wBAAwB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}