{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"treeContainer\"];\nexport let TreeVisualizationComponent = /*#__PURE__*/(() => {\n  class TreeVisualizationComponent {\n    treeContainer;\n    subscription;\n    data = {\n      name: \"Eve\",\n      children: [{\n        name: \"Cain\"\n      }, {\n        name: \"Seth\",\n        children: [{\n          name: \"Enos\"\n        }, {\n          name: \"Noam\"\n        }]\n      }, {\n        name: \"Abel\"\n      }, {\n        name: \"Awan\",\n        children: [{\n          name: \"Enoch\"\n        }]\n      }, {\n        name: \"Azura\"\n      }]\n    };\n    constructor() {}\n    ngOnInit() {}\n    ngAfterViewInit() {\n      const width = 928;\n      const height = 500;\n      // Compute the tree height; this approach will allow the height of the\n      // SVG to scale according to the breadth (width) of the tree layout.\n      const root = d3.hierarchy(this.data);\n      const dx = 20;\n      const dy = height / (root.height + 1);\n      // Create a tree layout.\n      const tree = d3.tree().nodeSize([dx, dy]);\n      // Sort the tree and apply the layout.\n      root.sort((a, b) => d3.ascending(a.data.name, b.data.name));\n      tree(root);\n      // Compute the extent of the tree.\n      let x0 = Infinity;\n      let x1 = -x0;\n      let y0 = Infinity;\n      let y1 = -y0;\n      root.each(d => {\n        if (d.x !== undefined && d.x > x1) x1 = d.x;\n        if (d.x !== undefined && d.x < x0) x0 = d.x;\n        if (d.y !== undefined && d.y > y1) y1 = d.y;\n        if (d.y !== undefined && d.y < y0) y0 = d.y;\n      });\n      const svg = d3.create(\"svg\").attr(\"width\", width).attr(\"height\", height).attr(\"viewBox\", [x0 - dx, y0 - dy, x1 - x0 + dx * 2, y1 - y0 + dy * 2]).attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\n      // Create the links\n      const links = root.links();\n      const linkGenerator = d3.linkVertical().x(d => d.x).y(d => d.y);\n      const link = svg.append(\"g\").attr(\"fill\", \"none\").attr(\"stroke\", \"#555\").attr(\"stroke-opacity\", 0.4).attr(\"stroke-width\", 1.5).selectAll(\"path\").data(links).join(\"path\").attr(\"d\", d => linkGenerator(d));\n      const node = svg.append(\"g\").attr(\"stroke-linejoin\", \"round\").attr(\"stroke-width\", 3).selectAll().data(root.descendants()).join(\"g\").attr(\"transform\", d => `translate(${d.x ?? 0},${d.y ?? 0})`);\n      node.append(\"circle\").attr(\"fill\", d => d.children ? \"#555\" : \"#999\").attr(\"r\", 2.5);\n      node.append(\"text\").attr(\"dy\", \"0.31em\").attr(\"x\", d => d.children ? -6 : 6).attr(\"text-anchor\", d => d.children ? \"end\" : \"start\").text(d => d.data.name).attr(\"stroke\", \"white\").attr(\"paint-order\", \"stroke\");\n      this.treeContainer.nativeElement.appendChild(svg.node());\n    }\n    resetView() {\n      // Implement reset functionality if needed\n    }\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    static ɵfac = function TreeVisualizationComponent_Factory(t) {\n      return new (t || TreeVisualizationComponent)();\n    };\n    static ɵcmp = (() => /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TreeVisualizationComponent,\n      selectors: [[\"app-tree-visualization\"]],\n      viewQuery: function TreeVisualizationComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n        }\n      },\n      decls: 6,\n      vars: 0,\n      consts: [[\"treeContainer\", \"\"], [1, \"tree-container\"], [1, \"tree-controls\"], [1, \"reset-button\", 3, \"click\"], [1, \"tree-visualization\"]],\n      template: function TreeVisualizationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function TreeVisualizationComponent_Template_button_click_2_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.resetView());\n          });\n          i0.ɵɵtext(3, \"\\u91CD\\u7F6E\\u8996\\u5716\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(4, \"div\", 4, 0);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".tree-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 600px;\\n  border: 1px solid #ccc;\\n  overflow: hidden;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90cmVlLXZpc3VhbGl6YXRpb24vdHJlZS12aXN1YWxpemF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGdCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIudHJlZS1jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA2MDBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    }))();\n  }\n  return TreeVisualizationComponent;\n})();","map":{"version":3,"names":["d3","TreeVisualizationComponent","treeContainer","subscription","data","name","children","constructor","ngOnInit","ngAfterViewInit","width","height","root","hierarchy","dx","dy","tree","nodeSize","sort","a","b","ascending","x0","Infinity","x1","y0","y1","each","d","x","undefined","y","svg","create","attr","links","linkGenerator","linkVertical","link","append","selectAll","join","node","descendants","text","nativeElement","appendChild","resetView","ngOnDestroy","unsubscribe","selectors","viewQuery","TreeVisualizationComponent_Query","rf","ctx","i0","ɵɵelementStart","ɵɵlistener","TreeVisualizationComponent_Template_button_click_2_listener","ɵɵrestoreView","_r1","ɵɵresetView","ɵɵtext","ɵɵelementEnd","ɵɵelement"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/components/tree-visualization/tree-visualization.component.ts","/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/components/tree-visualization/tree-visualization.component.html"],"sourcesContent":["import { Component, OnInit, ElementRef, ViewChild, AfterViewInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\nimport { TreeNode } from '../../interfaces/interfaces';\n\n@Component({\n  selector: 'app-tree-visualization',\n  templateUrl: './tree-visualization.component.html',\n  styleUrls: ['./tree-visualization.component.scss']\n})\nexport class TreeVisualizationComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('treeContainer', { static: true }) public treeContainer!: ElementRef;\n  private subscription: Subscription | undefined;\n\n  data: TreeNode = {\n    name: \"Eve\",\n    children: [\n      { name: \"Cain\" },\n      { name: \"Seth\", children: [{ name: \"Enos\" }, { name: \"Noam\" }] },\n      { name: \"Abel\" },\n      { name: \"Awan\", children: [{ name: \"Enoch\" }] },\n      { name: \"Azura\" }\n    ]\n  };\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    const width = 928;\n    const height = 500;\n\n    // Compute the tree height; this approach will allow the height of the\n    // SVG to scale according to the breadth (width) of the tree layout.\n    const root = d3.hierarchy(this.data);\n    const dx = 20;\n    const dy = height / (root.height + 1);\n\n    // Create a tree layout.\n    const tree = d3.tree<TreeNode>().nodeSize([dx, dy]);\n\n    // Sort the tree and apply the layout.\n    root.sort((a, b) => d3.ascending(a.data.name, b.data.name));\n    tree(root);\n\n    // Compute the extent of the tree.\n    let x0 = Infinity;\n    let x1 = -x0;\n    let y0 = Infinity;\n    let y1 = -y0;\n    root.each(d => {\n      if (d.x !== undefined && d.x > x1) x1 = d.x;\n      if (d.x !== undefined && d.x < x0) x0 = d.x;\n      if (d.y !== undefined && d.y > y1) y1 = d.y;\n      if (d.y !== undefined && d.y < y0) y0 = d.y;\n    });\n\n    const svg = d3.create(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [x0 - dx, y0 - dy, x1 - x0 + dx * 2, y1 - y0 + dy * 2])\n      .attr(\"style\", \"max-width: 100%; height: auto; font: 10px sans-serif;\");\n\n    // Create the links\n    const links = root.links();\n    const linkGenerator = d3.linkVertical()\n      .x((d: any) => d.x)\n      .y((d: any) => d.y);\n\n    const link = svg.append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#555\")\n      .attr(\"stroke-opacity\", 0.4)\n      .attr(\"stroke-width\", 1.5)\n      .selectAll(\"path\")\n      .data(links)\n      .join(\"path\")\n      .attr(\"d\", (d: any) => linkGenerator(d));\n\n    const node = svg.append(\"g\")\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-width\", 3)\n      .selectAll()\n      .data(root.descendants())\n      .join(\"g\")\n      .attr(\"transform\", d => `translate(${d.x ?? 0},${d.y ?? 0})`);\n\n    node.append(\"circle\")\n      .attr(\"fill\", d => d.children ? \"#555\" : \"#999\")\n      .attr(\"r\", 2.5);\n\n    node.append(\"text\")\n      .attr(\"dy\", \"0.31em\")\n      .attr(\"x\", d => d.children ? -6 : 6)\n      .attr(\"text-anchor\", d => d.children ? \"end\" : \"start\")\n      .text(d => d.data.name)\n      .attr(\"stroke\", \"white\")\n      .attr(\"paint-order\", \"stroke\");\n\n    this.treeContainer.nativeElement.appendChild(svg.node());\n  }\n\n  resetView(): void {\n    // Implement reset functionality if needed\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}","<div class=\"tree-container\">\n  <div class=\"tree-controls\">\n    <button class=\"reset-button\" (click)=\"resetView()\">重置視圖</button>\n  </div>\n  <div #treeContainer class=\"tree-visualization\"></div>\n</div> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}