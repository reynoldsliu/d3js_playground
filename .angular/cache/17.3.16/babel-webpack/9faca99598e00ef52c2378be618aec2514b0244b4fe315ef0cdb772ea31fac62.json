{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nexport let TreeVisualizationService = /*#__PURE__*/(() => {\n  class TreeVisualizationService {\n    svgWidth = 928;\n    svgHeight = 500;\n    nodeWidth = 75;\n    nodeHeight = 40;\n    defaultData = {\n      name: 'Eve',\n      children: [{\n        name: 'Cain'\n      }, {\n        name: 'Seth',\n        children: [{\n          name: 'Enos'\n        }, {\n          name: 'Noam'\n        }]\n      }, {\n        name: 'Abel'\n      }, {\n        name: 'Awan',\n        children: [{\n          name: 'Enoch'\n        }]\n      }, {\n        name: 'Azura'\n      }]\n    };\n    constructor() {}\n    getInitNode(data) {\n      if (!data) {\n        data = this.defaultData;\n      }\n      const root = d3.hierarchy(data);\n      const tree = d3.tree().nodeSize([this.nodeWidth, this.svgHeight / root.height + 1]);\n      tree(root);\n      const svg = d3.select('.tree-visualization').append('svg').attr('width', this.svgWidth).attr('height', this.svgHeight).attr('viewBox', [200, 300, this.svgWidth, this.svgHeight]).attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;');\n      ;\n      const nodes = svg.selectAll('.node').data(root.descendants()).enter().append('g').attr('class', 'node').attr('transform', d => `translate(${d.y},${d.x})`);\n      nodes.append('rect').attr('width', this.nodeWidth).attr('height', this.nodeHeight).style('fill', 'blue').attr('x', -this.nodeWidth / 2) // Center the rectangle on the node\n      .attr('y', -this.nodeHeight / 2);\n      const links = svg.selectAll('.link').data(root.links()).enter().append('path').attr('class', 'link').attr('d', d3.linkVertical().x(d => d.x).y(d => d.y)).style('fill', 'none').style('stroke', '#000000').style('stroke-width', '1.5px');\n      return svg.node();\n    }\n    getLinks(data) {\n      if (!data) {\n        data = this.defaultData;\n      }\n      const root = d3.hierarchy(data);\n      const links = d3.select('.tree-visualization').select('svg').selectAll('.link').data(root.links()).enter().append('path').attr('class', 'link').attr('d', d3.linkVertical().x(d => d.x).y(d => d.y)).style('fill', 'none').style('stroke', '#000000').style('stroke-width', '1.5px');\n      return links;\n    }\n    static ɵfac = function TreeVisualizationService_Factory(t) {\n      return new (t || TreeVisualizationService)();\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreeVisualizationService,\n      factory: TreeVisualizationService.ɵfac\n    }))();\n  }\n  return TreeVisualizationService;\n})();","map":{"version":3,"names":["d3","TreeVisualizationService","svgWidth","svgHeight","nodeWidth","nodeHeight","defaultData","name","children","constructor","getInitNode","data","root","hierarchy","tree","nodeSize","height","svg","select","append","attr","nodes","selectAll","descendants","enter","d","y","x","style","links","linkVertical","node","getLinks","factory","ɵfac"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/services/tree-visualization-service.ts"],"sourcesContent":["import {ElementRef, Injectable} from '@angular/core';\nimport * as d3 from 'd3';\nimport {TreeNode, TreeState} from '../interfaces/interfaces';\nimport {Selection} from 'd3-selection';\nimport {HierarchyNode} from 'd3-hierarchy';\n\n@Injectable()\nexport class TreeVisualizationService {\n\n  public svgWidth = 928;\n  public svgHeight = 500;\n  public nodeWidth = 75;\n  public nodeHeight = 40;\n\n  defaultData: TreeNode = {\n    name: 'Eve',\n    children: [\n      {name: 'Cain'},\n      {name: 'Seth', children: [{name: 'Enos'}, {name: 'Noam'}]},\n      {name: 'Abel'},\n      {name: 'Awan', children: [{name: 'Enoch'}]},\n      {name: 'Azura'}\n    ]\n  };\n\n  constructor() {\n  }\n\n  getInitNode(data: TreeNode | undefined) {\n    if (!data) {\n      data = this.defaultData;\n    }\n    const root = d3.hierarchy(data) as HierarchyNode<unknown>;\n    const tree = d3.tree().nodeSize([this.nodeWidth, this.svgHeight / root.height + 1]);\n    tree(root);\n\n    const svg = d3.select('.tree-visualization')\n      .append('svg')\n      .attr('width', this.svgWidth)\n      .attr('height', this.svgHeight)\n      .attr('viewBox', [200, 300, this.svgWidth, this.svgHeight])\n      .attr('style', 'max-width: 100%; height: auto; font: 10px sans-serif;');\n    ;\n\n    const nodes =\n      svg.selectAll('.node')\n        .data(root.descendants())\n        .enter()\n        .append('g')\n        .attr('class', 'node')\n      .attr('transform', d => `translate(${d.y},${d.x})`);\n\n    nodes.append('rect')\n      .attr('width', this.nodeWidth)\n      .attr('height', this.nodeHeight)\n      .style('fill', 'blue')\n      .attr('x', -this.nodeWidth / 2)  // Center the rectangle on the node\n      .attr('y', -this.nodeHeight / 2);\n\n    const links =\n      svg.selectAll('.link')\n        .data(root.links())\n        .enter()\n        .append('path')\n        .attr('class', 'link')\n        .attr('d', d3.linkVertical()\n          .x((d: any) => d.x)\n          .y((d: any) => d.y) as any)\n        .style('fill', 'none')\n        .style('stroke', '#000000')\n        .style('stroke-width', '1.5px');\n\n    return svg.node();\n  }\n\n  getLinks(data: TreeNode | undefined) {\n    if (!data) {\n      data = this.defaultData;\n    }\n    const root = d3.hierarchy(data);\n    const links =\n      d3.select('.tree-visualization')\n        .select('svg')\n        .selectAll('.link')\n      .data(root.links())\n        .enter()\n      .append('path')\n      .attr('class', 'link')\n      .attr('d', d3.linkVertical()\n        .x((d: any) => d.x)\n        .y((d: any) => d.y) as any)\n      .style('fill', 'none')\n      .style('stroke', '#000000')\n      .style('stroke-width', '1.5px');\n\n    return links;\n  }\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}