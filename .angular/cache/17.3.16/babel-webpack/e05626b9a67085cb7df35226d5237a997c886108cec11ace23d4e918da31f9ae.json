{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/tree-visualization-service\";\nconst _c0 = [\"treeContainer\"];\nexport let TreeVisualizationComponent = /*#__PURE__*/(() => {\n  class TreeVisualizationComponent {\n    treeVisualizationService;\n    treeContainer;\n    subscription;\n    data = {\n      name: \"Eve\",\n      children: [{\n        name: \"Cain\"\n      }, {\n        name: \"Seth\",\n        children: [{\n          name: \"Enos\"\n        }, {\n          name: \"Noam\"\n        }]\n      }, {\n        name: \"Abel\"\n      }, {\n        name: \"Awan\",\n        children: [{\n          name: \"Enoch\"\n        }]\n      }, {\n        name: \"Azura\"\n      }]\n    };\n    constructor(treeVisualizationService) {\n      this.treeVisualizationService = treeVisualizationService;\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      this.treeContainer.nativeElement = this.treeVisualizationService.extracted(this.data, this.treeContainer.nativeElement);\n    }\n    resetView() {\n      // Implement reset functionality if needed\n    }\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    static ɵfac = function TreeVisualizationComponent_Factory(t) {\n      return new (t || TreeVisualizationComponent)(i0.ɵɵdirectiveInject(i1.TreeVisualizationService));\n    };\n    static ɵcmp = (() => /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TreeVisualizationComponent,\n      selectors: [[\"app-tree-visualization\"]],\n      viewQuery: function TreeVisualizationComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeContainer = _t.first);\n        }\n      },\n      decls: 6,\n      vars: 0,\n      consts: [[\"treeContainer\", \"\"], [1, \"tree-container\"], [1, \"tree-controls\"], [1, \"reset-button\", 3, \"click\"], [1, \"tree-visualization\"]],\n      template: function TreeVisualizationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function TreeVisualizationComponent_Template_button_click_2_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.resetView());\n          });\n          i0.ɵɵtext(3, \"\\u91CD\\u7F6E\\u8996\\u5716\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(4, \"div\", 4, 0);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".tree-container[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: 600px;\\n  border: 1px solid #ccc;\\n  overflow: hidden;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90cmVlLXZpc3VhbGl6YXRpb24vdHJlZS12aXN1YWxpemF0aW9uLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGdCQUFBO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIudHJlZS1jb250YWluZXIge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiA2MDBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    }))();\n  }\n  return TreeVisualizationComponent;\n})();","map":{"version":3,"names":["TreeVisualizationComponent","treeVisualizationService","treeContainer","subscription","data","name","children","constructor","ngOnInit","ngAfterViewInit","nativeElement","extracted","resetView","ngOnDestroy","unsubscribe","i0","ɵɵdirectiveInject","i1","TreeVisualizationService","selectors","viewQuery","TreeVisualizationComponent_Query","rf","ctx","ɵɵelementStart","ɵɵlistener","TreeVisualizationComponent_Template_button_click_2_listener","ɵɵrestoreView","_r1","ɵɵresetView","ɵɵtext","ɵɵelementEnd","ɵɵelement"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/components/tree-visualization/tree-visualization.component.ts","/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/components/tree-visualization/tree-visualization.component.html"],"sourcesContent":["import { Component, OnInit, ElementRef, ViewChild, AfterViewInit, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\nimport { TreeNode } from '../../interfaces/interfaces';\nimport {TreeVisualizationService} from '../../services/tree-visualization-service';\n\n@Component({\n  selector: 'app-tree-visualization',\n  templateUrl: './tree-visualization.component.html',\n  styleUrls: ['./tree-visualization.component.scss']\n})\nexport class TreeVisualizationComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('treeContainer', { static: true }) public treeContainer!: ElementRef;\n  private subscription: Subscription | undefined;\n\n  data: TreeNode = {\n    name: \"Eve\",\n    children: [\n      { name: \"Cain\" },\n      { name: \"Seth\", children: [{ name: \"Enos\" }, { name: \"Noam\" }] },\n      { name: \"Abel\" },\n      { name: \"Awan\", children: [{ name: \"Enoch\" }] },\n      { name: \"Azura\" }\n    ]\n  };\n\n  constructor(private treeVisualizationService:TreeVisualizationService) { }\n\n  ngOnInit(): void {\n  }\n\n  ngAfterViewInit(): void {\n    this.treeContainer.nativeElement = this.treeVisualizationService.extracted(this.data, this.treeContainer.nativeElement);\n  }\n\n  resetView(): void {\n    // Implement reset functionality if needed\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"tree-container\">\n  <div class=\"tree-controls\">\n    <button class=\"reset-button\" (click)=\"resetView()\">重置視圖</button>\n  </div>\n  <div #treeContainer class=\"tree-visualization\"></div>\n</div> "],"mappings":";;;AAWA,WAAaA,0BAA0B;EAAjC,MAAOA,0BAA0B;IAejBC,wBAAA;IAdiCC,aAAa;IAC1DC,YAAY;IAEpBC,IAAI,GAAa;MACfC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE,CACR;QAAED,IAAI,EAAE;MAAM,CAAE,EAChB;QAAEA,IAAI,EAAE,MAAM;QAAEC,QAAQ,EAAE,CAAC;UAAED,IAAI,EAAE;QAAM,CAAE,EAAE;UAAEA,IAAI,EAAE;QAAM,CAAE;MAAC,CAAE,EAChE;QAAEA,IAAI,EAAE;MAAM,CAAE,EAChB;QAAEA,IAAI,EAAE,MAAM;QAAEC,QAAQ,EAAE,CAAC;UAAED,IAAI,EAAE;QAAO,CAAE;MAAC,CAAE,EAC/C;QAAEA,IAAI,EAAE;MAAO,CAAE;KAEpB;IAEDE,YAAoBN,wBAAiD;MAAjD,KAAAA,wBAAwB,GAAxBA,wBAAwB;IAA6B;IAEzEO,QAAQA,CAAA,GACR;IAEAC,eAAeA,CAAA;MACb,IAAI,CAACP,aAAa,CAACQ,aAAa,GAAG,IAAI,CAACT,wBAAwB,CAACU,SAAS,CAAC,IAAI,CAACP,IAAI,EAAE,IAAI,CAACF,aAAa,CAACQ,aAAa,CAAC;IACzH;IAEAE,SAASA,CAAA;MACP;IAAA;IAGFC,WAAWA,CAAA;MACT,IAAI,IAAI,CAACV,YAAY,EAAE;QACrB,IAAI,CAACA,YAAY,CAACW,WAAW,EAAE;MACjC;IACF;;uBAhCWd,0BAA0B,EAAAe,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,wBAAA;IAAA;;YAA1BlB,0BAA0B;MAAAmB,SAAA;MAAAC,SAAA,WAAAC,iCAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;;;;;;;;;;;;;UCTnCP,EAFJ,CAAAS,cAAA,aAA4B,aACC,gBAC0B;UAAtBT,EAAA,CAAAU,UAAA,mBAAAC,4DAAA;YAAAX,EAAA,CAAAY,aAAA,CAAAC,GAAA;YAAA,OAAAb,EAAA,CAAAc,WAAA,CAASN,GAAA,CAAAX,SAAA,EAAW;UAAA,EAAC;UAACG,EAAA,CAAAe,MAAA,+BAAI;UACzDf,EADyD,CAAAgB,YAAA,EAAS,EAC5D;UACNhB,EAAA,CAAAiB,SAAA,gBAAqD;UACvDjB,EAAA,CAAAgB,YAAA,EAAM;;;;;;SDMO/B,0BAA0B;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}