{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let TreeDataService = /*#__PURE__*/(() => {\n  class TreeDataService {\n    treeDataSubject = (() => new BehaviorSubject(null))();\n    treeData$ = this.treeDataSubject.asObservable();\n    // 當前選中節點的 BehaviorSubject\n    selectedNodeSubject = (() => new BehaviorSubject(null))();\n    selectedNode$ = this.selectedNodeSubject.asObservable();\n    // 樹狀視圖狀態\n    treeStateSubject = (() => new BehaviorSubject({\n      expandedNodeIds: [],\n      zoom: 1,\n      pan: {\n        x: 0,\n        y: 0\n      }\n    }))();\n    treeState$ = this.treeStateSubject.asObservable();\n    constructor() {}\n    // 載入初始數據\n    loadInitialData(data) {\n      this.treeDataSubject.next(data);\n    }\n    // 選擇節點\n    selectNode(nodeId) {\n      // TODO: 實現選擇節點邏輯\n      this.treeData$.subscribe(root => {\n        if (root) {\n          const node = this.getNodeByIdRecursion(root, nodeId);\n          if (node) {\n            node.selected = true;\n          }\n        }\n      });\n    }\n    // 新增節點\n    addNode(parentId, newNode) {\n      // TODO: 實現新增節點邏輯\n      this.treeData$;\n    }\n    // 編輯節點\n    updateNode(nodeId, updates) {\n      // TODO: 實現編輯節點邏輯\n    }\n    // 刪除節點\n    deleteNode(nodeId) {\n      // TODO: 實現刪除節點邏輯\n    }\n    // 鎖定/解鎖節點\n    toggleLockNode(nodeId, locked) {\n      // TODO: 實現鎖定/解鎖邏輯\n    }\n    // 節點關聯\n    linkNodes(sourceId, targetId) {\n      // TODO: 實現節點關聯邏輯\n    }\n    // 取消節點關聯\n    unlinkNodes(sourceId, targetId) {\n      // TODO: 實現取消節點關聯邏輯\n    }\n    // 查找相同名稱的節點\n    findNodesByName(name) {\n      // TODO: 實現查找相同名稱節點的邏輯\n      return [];\n    }\n    // 獲取當前樹狀視圖狀態\n    getTreeState() {\n      return this.treeStateSubject.getValue();\n    }\n    // 更新樹狀視圖狀態\n    updateTreeState(updates) {\n      this.treeStateSubject.next({\n        ...this.treeStateSubject.getValue(),\n        ...updates\n      });\n    }\n    getNodeByIdRecursion(root, nodeId) {\n      if (!root.children && root.id !== nodeId) {\n        return null;\n      }\n      if (root.id === nodeId) {\n        return root;\n      }\n      if (root.children) {\n        for (let i = 0; i < root?.children.length; i++) {\n          const subNode = this.getNodeByIdRecursion(root?.children[i], nodeId);\n          if (subNode) {\n            return subNode;\n          } else {\n            continue;\n          }\n        }\n      }\n      return null;\n    }\n    static ɵfac = function TreeDataService_Factory(t) {\n      return new (t || TreeDataService)();\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreeDataService,\n      factory: TreeDataService.ɵfac,\n      providedIn: 'root'\n    }))();\n  }\n  return TreeDataService;\n})();","map":{"version":3,"names":["BehaviorSubject","TreeDataService","treeDataSubject","treeData$","asObservable","selectedNodeSubject","selectedNode$","treeStateSubject","expandedNodeIds","zoom","pan","x","y","treeState$","constructor","loadInitialData","data","next","selectNode","nodeId","subscribe","root","node","getNodeByIdRecursion","selected","addNode","parentId","newNode","updateNode","updates","deleteNode","toggleLockNode","locked","linkNodes","sourceId","targetId","unlinkNodes","findNodesByName","name","getTreeState","getValue","updateTreeState","children","id","i","length","subNode","factory","ɵfac","providedIn"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/services/tree-data-service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {TreeNode, TreeState} from '../interfaces/interfaces';\n\n@Injectable({providedIn: 'root'})\nexport class TreeDataService {\n  private treeDataSubject = new BehaviorSubject<TreeNode | null>(null);\n  treeData$ = this.treeDataSubject.asObservable();\n\n  // 當前選中節點的 BehaviorSubject\n  private selectedNodeSubject = new BehaviorSubject<TreeNode | null>(null);\n  selectedNode$ = this.selectedNodeSubject.asObservable();\n\n  // 樹狀視圖狀態\n  private treeStateSubject = new BehaviorSubject<TreeState>({\n    expandedNodeIds: [],\n    zoom: 1,\n    pan: {x: 0, y: 0}\n  });\n  treeState$ = this.treeStateSubject.asObservable();\n\n  constructor() {\n  }\n\n  // 載入初始數據\n  loadInitialData(data: TreeNode): void {\n    this.treeDataSubject.next(data);\n  }\n\n  // 選擇節點\n  selectNode(nodeId: string): void {\n    // TODO: 實現選擇節點邏輯\n    this.treeData$.subscribe((root: TreeNode | null) => {\n      if (root) {\n        const node = this.getNodeByIdRecursion(root, nodeId);\n        if (node) {\n          node.selected = true;\n        }\n      }\n    });\n  }\n\n  // 新增節點\n  addNode(parentId: string | null, newNode: Partial<TreeNode>): void {\n    // TODO: 實現新增節點邏輯\n    this.treeData$\n  }\n\n  // 編輯節點\n  updateNode(nodeId: string, updates: Partial<TreeNode>): void {\n    // TODO: 實現編輯節點邏輯\n  }\n\n  // 刪除節點\n  deleteNode(nodeId: string): void {\n    // TODO: 實現刪除節點邏輯\n  }\n\n  // 鎖定/解鎖節點\n  toggleLockNode(nodeId: string, locked: boolean): void {\n    // TODO: 實現鎖定/解鎖邏輯\n  }\n\n  // 節點關聯\n  linkNodes(sourceId: string, targetId: string): void {\n    // TODO: 實現節點關聯邏輯\n  }\n\n  // 取消節點關聯\n  unlinkNodes(sourceId: string, targetId: string): void {\n    // TODO: 實現取消節點關聯邏輯\n  }\n\n  // 查找相同名稱的節點\n  findNodesByName(name: string): TreeNode[] {\n    // TODO: 實現查找相同名稱節點的邏輯\n    return [];\n  }\n\n  // 獲取當前樹狀視圖狀態\n  getTreeState(): TreeState {\n    return this.treeStateSubject.getValue();\n  }\n\n  // 更新樹狀視圖狀態\n  updateTreeState(updates: Partial<TreeState>): void {\n    this.treeStateSubject.next({\n      ...this.treeStateSubject.getValue(),\n      ...updates\n    });\n  }\n\n  getNodeByIdRecursion(root: TreeNode, nodeId: string): TreeNode | null {\n    if (!root.children && root.id !== nodeId) {\n      return null;\n    }\n    if (root.id === nodeId) {\n      return root;\n    }\n    if (root.children) {\n      for (let i = 0; i < root?.children.length; i++) {\n        const subNode = this.getNodeByIdRecursion(root?.children[i], nodeId);\n        if (subNode) {\n          return subNode;\n        } else {\n          continue;\n        }\n      }\n    }\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}