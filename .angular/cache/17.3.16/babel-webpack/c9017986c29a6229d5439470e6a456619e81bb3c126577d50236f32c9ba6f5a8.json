{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nexport let TreeVisualizationService = /*#__PURE__*/(() => {\n  class TreeVisualizationService {\n    constructor() {}\n    getInitNode(data) {\n      const rootHierarchy = d3.hierarchy(data);\n    }\n    children(d) {\n      d.d;\n      return d.children;\n    }\n    static ɵfac = function TreeVisualizationService_Factory(t) {\n      return new (t || TreeVisualizationService)();\n    };\n    static ɵprov = (() => /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TreeVisualizationService,\n      factory: TreeVisualizationService.ɵfac\n    }))();\n  }\n  return TreeVisualizationService;\n})();","map":{"version":3,"names":["d3","TreeVisualizationService","constructor","getInitNode","data","rootHierarchy","hierarchy","children","d","factory","ɵfac"],"sources":["/Users/reynolds/cursor/d3js_example2/angular8-app/src/app/services/tree-visualization-service.ts"],"sourcesContent":["import {ElementRef, Injectable} from '@angular/core';\nimport * as d3 from 'd3';\nimport {TreeNode, TreeState} from '../interfaces/interfaces';\nimport {Selection} from 'd3-selection';\nimport {HierarchyNode} from 'd3-hierarchy';\n\n@Injectable()\nexport class TreeVisualizationService {\n\n  constructor() {\n  }\n\n  getInitNode(data: TreeNode) {\n    const rootHierarchy = d3.hierarchy(data);\n\n  }\n\n  children(d: HierarchyNode<TreeNode>): HierarchyNode<TreeNode>[] | undefined{\n    d.d\n    return d.children;\n  }\n\n\n\n}\n"],"mappings":"AACA,OAAO,KAAKA,EAAE,MAAM,IAAI;;AAMxB,WAAaC,wBAAwB;EAA/B,MAAOA,wBAAwB;IAEnCC,YAAA,GACA;IAEAC,WAAWA,CAACC,IAAc;MACxB,MAAMC,aAAa,GAAGL,EAAE,CAACM,SAAS,CAACF,IAAI,CAAC;IAE1C;IAEAG,QAAQA,CAACC,CAA0B;MACjCA,CAAC,CAACA,CAAC;MACH,OAAOA,CAAC,CAACD,QAAQ;IACnB;;uBAbWN,wBAAwB;IAAA;;aAAxBA,wBAAwB;MAAAQ,OAAA,EAAxBR,wBAAwB,CAAAS;IAAA;;SAAxBT,wBAAwB;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}